import java.nio.charset.StandardCharsets
import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardCopyOption



buildscript {
  repositories {
    maven {
      url = uri("https://nexus.mysterymod.dev/repository/maven-releases/")
    }
  }
}
plugins {
  id 'java'
  id 'net.mysterymod.mysterymod-core' version('0.0.127')
}
group 'net.mysterymod'
version '1.0.0'
subprojects {
  buildscript {
    repositories {
      mavenCentral()
    }
  }

  apply plugin: 'java'

  repositories {
    mavenCentral()
    maven {
      name = "xmod-repository"
      url = uri("https://nexus.mysterymod.dev/repository/maven-releases/")
      credentials {
        username = project.findProperty("mysterymod.nexus.user") ?: System.getenv("NEXUS_USER")
        password = project.findProperty("mysterymod.nexus.password") ?: System.getenv("NEXUS_PASSWORD")
      }
    }
  }

  dependencies {
    compile fileTree(dir: "${rootDir}/libs", include: ['*.jar'])
    compileOnly 'org.projectlombok:lombok:1.18.12'
    annotationProcessor 'org.projectlombok:lombok:1.18.12'
  }

  compileJava {
    sourceCompatibility = '1.8'
    targetCompatibility = '1.8'
    options.encoding = 'UTF-8'
  }

  task copyAddon(type: Copy) {
    from jar
    into "${rootDir}/run/${project.name}/MysteryMod/addons/${project.name}"
  }

  project.ext {
    // CHANGE THIS
    archivesName = "mod-addon"
    modVersion = "0.1.13+build.1018"
    jarIncludes = ["mystery-mod-addon"]
    // CHANGE THIS
    mixinFile = "mixins.addon"
    annotationProcessorsLegacy = [
      "org.ow2.asm:asm-debug-all:5.2",
      "com.google.guava:guava:21.0",
      "org.apache.logging.log4j:log4j-core:2.0-beta9",
      "commons-io:commons-io:2.4",
      "com.google.code.gson:gson:2.2.4",
      "org.spongepowered:mixin:0.7.11-SNAPSHOT"
    ]
    annotationProcessorsNew = [
      "com.google.guava:guava:21.0",
      "org.apache.logging.log4j:log4j-core:2.0-beta9",
      "org.ow2.asm:asm-tree:6.2",
      'org.ow2.asm:asm-commons:6.2',
      'org.ow2.asm:asm-util:6.2',
      "com.google.code.gson:gson:2.2.4",
      "org.spongepowered:mixin:0.8.1-mysterymod"
    ]
  }
}

wrapper {
  gradleVersion = '4.9'
  distributionType = Wrapper.DistributionType.ALL
}

def versions = ["1.8.9", "1.12.2", "1.16.5"]

task buildJars {
  group = 'mysterymod'

  versions.each { mcVersion ->
    println("Creating dev version for: " + mcVersion)
    dependsOn ':jars:' + mcVersion + ':devBuild'

  }

  versions.each { mcVersion ->
    println("Creating prod version for: " + mcVersion)
    dependsOn ':jars:' + mcVersion + ':build'
  }

}


task copyJars {
  group = "mysterymod"

  versions.each {mcVersion ->
    copy(mcVersion, true, version, "addon", rootDir)
    copy(mcVersion, false, version, "addon", rootDir)
  }
}

static def download(String url, def closure, Project project) {
  HttpURLConnection connection = new URL(url).openConnection() as HttpURLConnection
  connection.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36")
  String username = project.findProperty("mysterymod.downloads.user")
  String password = project.findProperty("mysterymod.downloads.password")
  connection.setRequestProperty("Authorization", "Basic " + new String(Base64.encoder.encode((username + ":" + password).getBytes(StandardCharsets.UTF_8))))

  closure(connection.getInputStream())
}

static def copy(String mcVersion, boolean dev, String version, String name, File rootDir) {


  java.nio.file.Path versionPath = dev ? Paths.get("$rootDir/versions/" + mcVersion + "/build/libs/" + mcVersion + "-" + version + ".jar")
    : Paths.get("$rootDir/jars/" + mcVersion + "/build/libs/mod-addon-" + mcVersion + ".jar")

  java.nio.file.Path exportPath = Paths.get("$rootDir/build/" + mcVersion + "/" + name + "-" + (dev ? "development" : "production") + "-" + mcVersion + ".jar")

  if (Files.notExists(versionPath)) {
    println("Cannot find the addon.")
    return;
  }
  if (Files.notExists(exportPath.getParent())) {
    Files.createDirectories(exportPath.getParent());
  }

  Files.copy(versionPath, exportPath, StandardCopyOption.REPLACE_EXISTING);
}